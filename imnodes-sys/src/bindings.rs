/* automatically generated by rust-bindgen 0.71.1 */

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiContext {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVec2 {
    pub x: f32,
    pub y: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImVec2"][::std::mem::size_of::<ImVec2>() - 8usize];
    ["Alignment of ImVec2"][::std::mem::align_of::<ImVec2>() - 4usize];
    ["Offset of field: ImVec2::x"][::std::mem::offset_of!(ImVec2, x) - 0usize];
    ["Offset of field: ImVec2::y"][::std::mem::offset_of!(ImVec2, y) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImNodesContext {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImNodesEditorContext {
    _unused: [u8; 0],
}
pub type ImNodesCol = ::std::os::raw::c_int;
pub type ImNodesStyleVar = ::std::os::raw::c_int;
pub type ImNodesStyleFlags = ::std::os::raw::c_int;
pub type ImNodesPinShape = ::std::os::raw::c_int;
pub type ImNodesAttributeFlags = ::std::os::raw::c_int;
pub type ImNodesMiniMapLocation = ::std::os::raw::c_int;
pub type ImNodesNodeSideShape = ::std::os::raw::c_int;
pub type ImNodesLinkStyle = ::std::os::raw::c_int;
pub const ImNodesCol__ImNodesCol_NodeBackground: ImNodesCol_ = 0;
pub const ImNodesCol__ImNodesCol_NodeBackgroundHovered: ImNodesCol_ = 1;
pub const ImNodesCol__ImNodesCol_NodeBackgroundSelected: ImNodesCol_ = 2;
pub const ImNodesCol__ImNodesCol_NodeOutline: ImNodesCol_ = 3;
pub const ImNodesCol__ImNodesCol_TitleBar: ImNodesCol_ = 4;
pub const ImNodesCol__ImNodesCol_TitleBarHovered: ImNodesCol_ = 5;
pub const ImNodesCol__ImNodesCol_TitleBarSelected: ImNodesCol_ = 6;
pub const ImNodesCol__ImNodesCol_Link: ImNodesCol_ = 7;
pub const ImNodesCol__ImNodesCol_LinkHovered: ImNodesCol_ = 8;
pub const ImNodesCol__ImNodesCol_LinkSelected: ImNodesCol_ = 9;
pub const ImNodesCol__ImNodesCol_Pin: ImNodesCol_ = 10;
pub const ImNodesCol__ImNodesCol_PinHovered: ImNodesCol_ = 11;
pub const ImNodesCol__ImNodesCol_BoxSelector: ImNodesCol_ = 12;
pub const ImNodesCol__ImNodesCol_BoxSelectorOutline: ImNodesCol_ = 13;
pub const ImNodesCol__ImNodesCol_GridBackground: ImNodesCol_ = 14;
pub const ImNodesCol__ImNodesCol_GridLine: ImNodesCol_ = 15;
pub const ImNodesCol__ImNodesCol_GridLinePrimary: ImNodesCol_ = 16;
pub const ImNodesCol__ImNodesCol_MiniMapBackground: ImNodesCol_ = 17;
pub const ImNodesCol__ImNodesCol_MiniMapBackgroundHovered: ImNodesCol_ = 18;
pub const ImNodesCol__ImNodesCol_MiniMapOutline: ImNodesCol_ = 19;
pub const ImNodesCol__ImNodesCol_MiniMapOutlineHovered: ImNodesCol_ = 20;
pub const ImNodesCol__ImNodesCol_MiniMapNodeBackground: ImNodesCol_ = 21;
pub const ImNodesCol__ImNodesCol_MiniMapNodeBackgroundHovered: ImNodesCol_ = 22;
pub const ImNodesCol__ImNodesCol_MiniMapNodeBackgroundSelected: ImNodesCol_ = 23;
pub const ImNodesCol__ImNodesCol_MiniMapNodeOutline: ImNodesCol_ = 24;
pub const ImNodesCol__ImNodesCol_MiniMapLink: ImNodesCol_ = 25;
pub const ImNodesCol__ImNodesCol_MiniMapLinkSelected: ImNodesCol_ = 26;
pub const ImNodesCol__ImNodesCol_MiniMapCanvas: ImNodesCol_ = 27;
pub const ImNodesCol__ImNodesCol_MiniMapCanvasOutline: ImNodesCol_ = 28;
pub const ImNodesCol__ImNodesCol_COUNT: ImNodesCol_ = 29;
pub type ImNodesCol_ = ::std::os::raw::c_int;
pub const ImNodesStyleVar__ImNodesStyleVar_GridSpacing: ImNodesStyleVar_ = 0;
pub const ImNodesStyleVar__ImNodesStyleVar_NodeCornerRounding: ImNodesStyleVar_ = 1;
pub const ImNodesStyleVar__ImNodesStyleVar_NodePadding: ImNodesStyleVar_ = 2;
pub const ImNodesStyleVar__ImNodesStyleVar_NodeBorderThickness: ImNodesStyleVar_ = 3;
pub const ImNodesStyleVar__ImNodesStyleVar_LinkTerminationMargin: ImNodesStyleVar_ = 4;
pub const ImNodesStyleVar__ImNodesStyleVar_LinkThickness: ImNodesStyleVar_ = 5;
pub const ImNodesStyleVar__ImNodesStyleVar_LinkLineSegmentsPerLength: ImNodesStyleVar_ = 6;
pub const ImNodesStyleVar__ImNodesStyleVar_LinkHoverDistance: ImNodesStyleVar_ = 7;
pub const ImNodesStyleVar__ImNodesStyleVar_PinCircleRadius: ImNodesStyleVar_ = 8;
pub const ImNodesStyleVar__ImNodesStyleVar_PinQuadSideLength: ImNodesStyleVar_ = 9;
pub const ImNodesStyleVar__ImNodesStyleVar_PinTriangleSideLength: ImNodesStyleVar_ = 10;
pub const ImNodesStyleVar__ImNodesStyleVar_PinLineThickness: ImNodesStyleVar_ = 11;
pub const ImNodesStyleVar__ImNodesStyleVar_PinHoverRadius: ImNodesStyleVar_ = 12;
pub const ImNodesStyleVar__ImNodesStyleVar_PinOffset: ImNodesStyleVar_ = 13;
pub const ImNodesStyleVar__ImNodesStyleVar_MiniMapPadding: ImNodesStyleVar_ = 14;
pub const ImNodesStyleVar__ImNodesStyleVar_MiniMapOffset: ImNodesStyleVar_ = 15;
pub const ImNodesStyleVar__ImNodesStyleVar_COUNT: ImNodesStyleVar_ = 16;
pub type ImNodesStyleVar_ = ::std::os::raw::c_int;
pub const ImNodesStyleFlags__ImNodesStyleFlags_None: ImNodesStyleFlags_ = 0;
pub const ImNodesStyleFlags__ImNodesStyleFlags_NodeOutline: ImNodesStyleFlags_ = 1;
pub const ImNodesStyleFlags__ImNodesStyleFlags_GridLines: ImNodesStyleFlags_ = 4;
pub const ImNodesStyleFlags__ImNodesStyleFlags_GridLinesPrimary: ImNodesStyleFlags_ = 8;
pub const ImNodesStyleFlags__ImNodesStyleFlags_GridSnapping: ImNodesStyleFlags_ = 16;
pub type ImNodesStyleFlags_ = ::std::os::raw::c_int;
pub const ImNodesPinShape__ImNodesPinShape_Circle: ImNodesPinShape_ = 0;
pub const ImNodesPinShape__ImNodesPinShape_CircleFilled: ImNodesPinShape_ = 1;
pub const ImNodesPinShape__ImNodesPinShape_Triangle: ImNodesPinShape_ = 2;
pub const ImNodesPinShape__ImNodesPinShape_TriangleFilled: ImNodesPinShape_ = 3;
pub const ImNodesPinShape__ImNodesPinShape_Quad: ImNodesPinShape_ = 4;
pub const ImNodesPinShape__ImNodesPinShape_QuadFilled: ImNodesPinShape_ = 5;
pub type ImNodesPinShape_ = ::std::os::raw::c_int;
pub const ImNodesNodeSideShape__ImNodesNodeSideShape_Straight: ImNodesNodeSideShape_ = 0;
pub const ImNodesNodeSideShape__ImNodesNodeSideShape_Round: ImNodesNodeSideShape_ = 1;
pub const ImNodesNodeSideShape__ImNodesNodeSideShape_Sharp: ImNodesNodeSideShape_ = 2;
pub type ImNodesNodeSideShape_ = ::std::os::raw::c_int;
pub const ImNodesLinkStyle__ImNodesLinkStyle_Orthogonal: ImNodesLinkStyle_ = 0;
pub const ImNodesLinkStyle__ImNodesLinkStyle_Beziers: ImNodesLinkStyle_ = 1;
pub type ImNodesLinkStyle_ = ::std::os::raw::c_int;
pub const ImNodesAttributeFlags__ImNodesAttributeFlags_None: ImNodesAttributeFlags_ = 0;
pub const ImNodesAttributeFlags__ImNodesAttributeFlags_EnableLinkDetachWithDragClick:
    ImNodesAttributeFlags_ = 1;
pub const ImNodesAttributeFlags__ImNodesAttributeFlags_EnableLinkCreationOnSnap:
    ImNodesAttributeFlags_ = 2;
pub type ImNodesAttributeFlags_ = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct EmulateThreeButtonMouse {
    pub Modifier: *const bool,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of EmulateThreeButtonMouse"][::std::mem::size_of::<EmulateThreeButtonMouse>() - 8usize];
    ["Alignment of EmulateThreeButtonMouse"]
        [::std::mem::align_of::<EmulateThreeButtonMouse>() - 8usize];
    ["Offset of field: EmulateThreeButtonMouse::Modifier"]
        [::std::mem::offset_of!(EmulateThreeButtonMouse, Modifier) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LinkDetachWithModifierClick {
    pub Modifier: *const bool,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of LinkDetachWithModifierClick"]
        [::std::mem::size_of::<LinkDetachWithModifierClick>() - 8usize];
    ["Alignment of LinkDetachWithModifierClick"]
        [::std::mem::align_of::<LinkDetachWithModifierClick>() - 8usize];
    ["Offset of field: LinkDetachWithModifierClick::Modifier"]
        [::std::mem::offset_of!(LinkDetachWithModifierClick, Modifier) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MultipleSelectModifier {
    pub Modifier: *const bool,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of MultipleSelectModifier"][::std::mem::size_of::<MultipleSelectModifier>() - 8usize];
    ["Alignment of MultipleSelectModifier"]
        [::std::mem::align_of::<MultipleSelectModifier>() - 8usize];
    ["Offset of field: MultipleSelectModifier::Modifier"]
        [::std::mem::offset_of!(MultipleSelectModifier, Modifier) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImNodesIO {
    pub EmulateThreeButtonMouse: EmulateThreeButtonMouse,
    pub LinkDetachWithModifierClick: LinkDetachWithModifierClick,
    pub MultipleSelectModifier: MultipleSelectModifier,
    pub AltMouseButton: ::std::os::raw::c_int,
    pub AutoPanningSpeed: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImNodesIO"][::std::mem::size_of::<ImNodesIO>() - 32usize];
    ["Alignment of ImNodesIO"][::std::mem::align_of::<ImNodesIO>() - 8usize];
    ["Offset of field: ImNodesIO::EmulateThreeButtonMouse"]
        [::std::mem::offset_of!(ImNodesIO, EmulateThreeButtonMouse) - 0usize];
    ["Offset of field: ImNodesIO::LinkDetachWithModifierClick"]
        [::std::mem::offset_of!(ImNodesIO, LinkDetachWithModifierClick) - 8usize];
    ["Offset of field: ImNodesIO::MultipleSelectModifier"]
        [::std::mem::offset_of!(ImNodesIO, MultipleSelectModifier) - 16usize];
    ["Offset of field: ImNodesIO::AltMouseButton"]
        [::std::mem::offset_of!(ImNodesIO, AltMouseButton) - 24usize];
    ["Offset of field: ImNodesIO::AutoPanningSpeed"]
        [::std::mem::offset_of!(ImNodesIO, AutoPanningSpeed) - 28usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImNodesStyle {
    pub GridSpacing: f32,
    pub NodeCornerRounding: f32,
    pub NodeShapedSideDepth: f32,
    pub NodePadding: ImVec2,
    pub NodeBorderThickness: f32,
    pub LinkTerminationMargin: f32,
    pub LinkThickness: f32,
    pub LinkLineSegmentsPerLength: f32,
    pub LinkHoverDistance: f32,
    pub PinCircleRadius: f32,
    pub PinQuadSideLength: f32,
    pub PinTriangleSideLength: f32,
    pub PinLineThickness: f32,
    pub PinHoverRadius: f32,
    pub PinOffset: f32,
    pub MiniMapPadding: ImVec2,
    pub MiniMapOffset: ImVec2,
    pub Flags: ImNodesStyleFlags,
    pub Colors: [::std::os::raw::c_uint; 29usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImNodesStyle"][::std::mem::size_of::<ImNodesStyle>() - 200usize];
    ["Alignment of ImNodesStyle"][::std::mem::align_of::<ImNodesStyle>() - 4usize];
    ["Offset of field: ImNodesStyle::GridSpacing"]
        [::std::mem::offset_of!(ImNodesStyle, GridSpacing) - 0usize];
    ["Offset of field: ImNodesStyle::NodeCornerRounding"]
        [::std::mem::offset_of!(ImNodesStyle, NodeCornerRounding) - 4usize];
    ["Offset of field: ImNodesStyle::NodeShapedSideDepth"]
        [::std::mem::offset_of!(ImNodesStyle, NodeShapedSideDepth) - 8usize];
    ["Offset of field: ImNodesStyle::NodePadding"]
        [::std::mem::offset_of!(ImNodesStyle, NodePadding) - 12usize];
    ["Offset of field: ImNodesStyle::NodeBorderThickness"]
        [::std::mem::offset_of!(ImNodesStyle, NodeBorderThickness) - 20usize];
    ["Offset of field: ImNodesStyle::LinkTerminationMargin"]
        [::std::mem::offset_of!(ImNodesStyle, LinkTerminationMargin) - 24usize];
    ["Offset of field: ImNodesStyle::LinkThickness"]
        [::std::mem::offset_of!(ImNodesStyle, LinkThickness) - 28usize];
    ["Offset of field: ImNodesStyle::LinkLineSegmentsPerLength"]
        [::std::mem::offset_of!(ImNodesStyle, LinkLineSegmentsPerLength) - 32usize];
    ["Offset of field: ImNodesStyle::LinkHoverDistance"]
        [::std::mem::offset_of!(ImNodesStyle, LinkHoverDistance) - 36usize];
    ["Offset of field: ImNodesStyle::PinCircleRadius"]
        [::std::mem::offset_of!(ImNodesStyle, PinCircleRadius) - 40usize];
    ["Offset of field: ImNodesStyle::PinQuadSideLength"]
        [::std::mem::offset_of!(ImNodesStyle, PinQuadSideLength) - 44usize];
    ["Offset of field: ImNodesStyle::PinTriangleSideLength"]
        [::std::mem::offset_of!(ImNodesStyle, PinTriangleSideLength) - 48usize];
    ["Offset of field: ImNodesStyle::PinLineThickness"]
        [::std::mem::offset_of!(ImNodesStyle, PinLineThickness) - 52usize];
    ["Offset of field: ImNodesStyle::PinHoverRadius"]
        [::std::mem::offset_of!(ImNodesStyle, PinHoverRadius) - 56usize];
    ["Offset of field: ImNodesStyle::PinOffset"]
        [::std::mem::offset_of!(ImNodesStyle, PinOffset) - 60usize];
    ["Offset of field: ImNodesStyle::MiniMapPadding"]
        [::std::mem::offset_of!(ImNodesStyle, MiniMapPadding) - 64usize];
    ["Offset of field: ImNodesStyle::MiniMapOffset"]
        [::std::mem::offset_of!(ImNodesStyle, MiniMapOffset) - 72usize];
    ["Offset of field: ImNodesStyle::Flags"][::std::mem::offset_of!(ImNodesStyle, Flags) - 80usize];
    ["Offset of field: ImNodesStyle::Colors"]
        [::std::mem::offset_of!(ImNodesStyle, Colors) - 84usize];
};
pub const ImNodesMiniMapLocation__ImNodesMiniMapLocation_BottomLeft: ImNodesMiniMapLocation_ = 0;
pub const ImNodesMiniMapLocation__ImNodesMiniMapLocation_BottomRight: ImNodesMiniMapLocation_ = 1;
pub const ImNodesMiniMapLocation__ImNodesMiniMapLocation_TopLeft: ImNodesMiniMapLocation_ = 2;
pub const ImNodesMiniMapLocation__ImNodesMiniMapLocation_TopRight: ImNodesMiniMapLocation_ = 3;
pub type ImNodesMiniMapLocation_ = ::std::os::raw::c_int;
pub type ImNodesMiniMapNodeHoveringCallback = ::std::option::Option<
    unsafe extern "C" fn(arg1: ::std::os::raw::c_int, arg2: *mut ::std::os::raw::c_void),
>;
pub type ImNodesMiniMapNodeHoveringCallbackUserData = *mut ::std::os::raw::c_void;
unsafe extern "C" {
    pub fn ImNodesIO_ImNodesIO() -> *mut ImNodesIO;
}
unsafe extern "C" {
    pub fn ImNodesIO_destroy(self_: *mut ImNodesIO);
}
unsafe extern "C" {
    pub fn ImNodesStyle_ImNodesStyle() -> *mut ImNodesStyle;
}
unsafe extern "C" {
    pub fn ImNodesStyle_destroy(self_: *mut ImNodesStyle);
}
unsafe extern "C" {
    pub fn imnodes_SetImGuiContext(ctx: *mut ImGuiContext);
}
unsafe extern "C" {
    pub fn imnodes_CreateContext() -> *mut ImNodesContext;
}
unsafe extern "C" {
    pub fn imnodes_DestroyContext(ctx: *mut ImNodesContext);
}
unsafe extern "C" {
    pub fn imnodes_GetCurrentContext() -> *mut ImNodesContext;
}
unsafe extern "C" {
    pub fn imnodes_SetCurrentContext(ctx: *mut ImNodesContext);
}
unsafe extern "C" {
    pub fn imnodes_EditorContextCreate() -> *mut ImNodesEditorContext;
}
unsafe extern "C" {
    pub fn imnodes_EditorContextFree(noname1: *mut ImNodesEditorContext);
}
unsafe extern "C" {
    pub fn imnodes_EditorContextSet(noname1: *mut ImNodesEditorContext);
}
unsafe extern "C" {
    pub fn imnodes_EditorContextGetPanning(pOut: *mut ImVec2);
}
unsafe extern "C" {
    pub fn imnodes_EditorContextResetPanning(pos: ImVec2);
}
unsafe extern "C" {
    pub fn imnodes_EditorContextMoveToNode(node_id: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn imnodes_GetIO() -> *mut ImNodesIO;
}
unsafe extern "C" {
    pub fn imnodes_GetStyle() -> *mut ImNodesStyle;
}
unsafe extern "C" {
    pub fn imnodes_StyleColorsDark(dest: *mut ImNodesStyle);
}
unsafe extern "C" {
    pub fn imnodes_StyleColorsClassic(dest: *mut ImNodesStyle);
}
unsafe extern "C" {
    pub fn imnodes_StyleColorsLight(dest: *mut ImNodesStyle);
}
unsafe extern "C" {
    pub fn imnodes_BeginNodeEditor();
}
unsafe extern "C" {
    pub fn imnodes_EndNodeEditor();
}
unsafe extern "C" {
    pub fn imnodes_MiniMap(
        minimap_size_fraction: f32,
        location: ImNodesMiniMapLocation,
        node_hovering_callback: ImNodesMiniMapNodeHoveringCallback,
        node_hovering_callback_data: ImNodesMiniMapNodeHoveringCallbackUserData,
    );
}
unsafe extern "C" {
    pub fn imnodes_PushColorStyle(item: ImNodesCol, color: ::std::os::raw::c_uint);
}
unsafe extern "C" {
    pub fn imnodes_PopColorStyle();
}
unsafe extern "C" {
    pub fn imnodes_PushStyleVar_Float(style_item: ImNodesStyleVar, value: f32);
}
unsafe extern "C" {
    pub fn imnodes_PushStyleVar_Vec2(style_item: ImNodesStyleVar, value: ImVec2);
}
unsafe extern "C" {
    pub fn imnodes_PopStyleVar(count: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn imnodes_BeginNode(id: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn imnodes_EndNode();
}
unsafe extern "C" {
    pub fn imnodes_GetNodeDimensions(pOut: *mut ImVec2, id: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn imnodes_BeginNodeTitleBar();
}
unsafe extern "C" {
    pub fn imnodes_EndNodeTitleBar();
}
unsafe extern "C" {
    pub fn imnodes_BeginInputAttribute(id: ::std::os::raw::c_int, shape: ImNodesPinShape);
}
unsafe extern "C" {
    pub fn imnodes_EndInputAttribute();
}
unsafe extern "C" {
    pub fn imnodes_BeginOutputAttribute(id: ::std::os::raw::c_int, shape: ImNodesPinShape);
}
unsafe extern "C" {
    pub fn imnodes_EndOutputAttribute();
}
unsafe extern "C" {
    pub fn imnodes_BeginStaticAttribute(id: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn imnodes_EndStaticAttribute();
}
unsafe extern "C" {
    pub fn imnodes_PushAttributeFlag(flag: ImNodesAttributeFlags);
}
unsafe extern "C" {
    pub fn imnodes_PopAttributeFlag();
}
unsafe extern "C" {
    pub fn imnodes_Link(
        id: ::std::os::raw::c_int,
        start_attribute_id: ::std::os::raw::c_int,
        end_attribute_id: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn imnodes_LinkWithWaypoints(
        id: ::std::os::raw::c_int,
        start_attribute_id: ::std::os::raw::c_int,
        end_attribute_id: ::std::os::raw::c_int,
        length: usize,
        orthogonal_waypoints: *const f32,
    );
}
unsafe extern "C" {
    pub fn imnodes_SetNodeDraggable(node_id: ::std::os::raw::c_int, draggable: bool);
}
unsafe extern "C" {
    pub fn imnodes_SetNodeLeftSideShape(
        node_id: ::std::os::raw::c_int,
        shape: ImNodesNodeSideShape,
    );
}
unsafe extern "C" {
    pub fn imnodes_SetNodeRightSideShape(
        node_id: ::std::os::raw::c_int,
        shape: ImNodesNodeSideShape,
    );
}
unsafe extern "C" {
    pub fn imnodes_SetNodeShapedSideDepth(node_id: ::std::os::raw::c_int, depth: f32);
}
unsafe extern "C" {
    pub fn imnodes_SetNodeScreenSpacePos(node_id: ::std::os::raw::c_int, screen_space_pos: ImVec2);
}
unsafe extern "C" {
    pub fn imnodes_SetNodeEditorSpacePos(node_id: ::std::os::raw::c_int, editor_space_pos: ImVec2);
}
unsafe extern "C" {
    pub fn imnodes_SetNodeGridSpacePos(node_id: ::std::os::raw::c_int, grid_pos: ImVec2);
}
unsafe extern "C" {
    pub fn imnodes_GetNodeScreenSpacePos(pOut: *mut ImVec2, node_id: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn imnodes_GetNodeEditorSpacePos(pOut: *mut ImVec2, node_id: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn imnodes_GetNodeGridSpacePos(pOut: *mut ImVec2, node_id: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn imnodes_SnapNodeToGrid(node_id: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn imnodes_SetPinCategory(pin_id: ::std::os::raw::c_int, category: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn imnodes_GetPinCategory(pin_id: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn imnodes_SetLinkStyle(link_id: ::std::os::raw::c_int, style: ImNodesLinkStyle);
}
unsafe extern "C" {
    pub fn imnodes_SetLinkPathOrthogonalWaypoints(
        link_id: ::std::os::raw::c_int,
        length: usize,
        waypoints: *const f32,
    );
}
unsafe extern "C" {
    pub fn imnodes_IsEditorHovered() -> bool;
}
unsafe extern "C" {
    pub fn imnodes_IsNodeHovered(node_id: *mut ::std::os::raw::c_int) -> bool;
}
unsafe extern "C" {
    pub fn imnodes_IsLinkHovered(link_id: *mut ::std::os::raw::c_int) -> bool;
}
unsafe extern "C" {
    pub fn imnodes_IsPinHovered(attribute_id: *mut ::std::os::raw::c_int) -> bool;
}
unsafe extern "C" {
    pub fn imnodes_NumSelectedNodes() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn imnodes_NumSelectedLinks() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn imnodes_GetSelectedNodes(node_ids: *mut ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn imnodes_GetSelectedLinks(link_ids: *mut ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn imnodes_ClearNodeSelection_Nil();
}
unsafe extern "C" {
    pub fn imnodes_ClearLinkSelection_Nil();
}
unsafe extern "C" {
    pub fn imnodes_SelectNode(node_id: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn imnodes_ClearNodeSelection_Int(node_id: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn imnodes_IsNodeSelected(node_id: ::std::os::raw::c_int) -> bool;
}
unsafe extern "C" {
    pub fn imnodes_SelectLink(link_id: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn imnodes_ClearLinkSelection_Int(link_id: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn imnodes_IsLinkSelected(link_id: ::std::os::raw::c_int) -> bool;
}
unsafe extern "C" {
    pub fn imnodes_IsAttributeActive() -> bool;
}
unsafe extern "C" {
    pub fn imnodes_IsAnyAttributeActive(attribute_id: *mut ::std::os::raw::c_int) -> bool;
}
unsafe extern "C" {
    pub fn imnodes_IsLinkStarted(started_at_attribute_id: *mut ::std::os::raw::c_int) -> bool;
}
unsafe extern "C" {
    pub fn imnodes_IsLinkDropped(
        started_at_attribute_id: *mut ::std::os::raw::c_int,
        including_detached_links: bool,
    ) -> bool;
}
unsafe extern "C" {
    pub fn imnodes_IsLinkCreated_BoolPtr(
        started_at_attribute_id: *mut ::std::os::raw::c_int,
        ended_at_attribute_id: *mut ::std::os::raw::c_int,
        created_from_snap: *mut bool,
    ) -> bool;
}
unsafe extern "C" {
    pub fn imnodes_IsLinkCreated_IntPtr(
        started_at_node_id: *mut ::std::os::raw::c_int,
        started_at_attribute_id: *mut ::std::os::raw::c_int,
        ended_at_node_id: *mut ::std::os::raw::c_int,
        ended_at_attribute_id: *mut ::std::os::raw::c_int,
        created_from_snap: *mut bool,
    ) -> bool;
}
unsafe extern "C" {
    pub fn imnodes_IsLinkDestroyed(link_id: *mut ::std::os::raw::c_int) -> bool;
}
unsafe extern "C" {
    pub fn imnodes_SaveCurrentEditorStateToIniString(
        data_size: *mut usize,
    ) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn imnodes_SaveEditorStateToIniString(
        editor: *const ImNodesEditorContext,
        data_size: *mut usize,
    ) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn imnodes_LoadCurrentEditorStateFromIniString(
        data: *const ::std::os::raw::c_char,
        data_size: usize,
    );
}
unsafe extern "C" {
    pub fn imnodes_LoadEditorStateFromIniString(
        editor: *mut ImNodesEditorContext,
        data: *const ::std::os::raw::c_char,
        data_size: usize,
    );
}
unsafe extern "C" {
    pub fn imnodes_SaveCurrentEditorStateToIniFile(file_name: *const ::std::os::raw::c_char);
}
unsafe extern "C" {
    pub fn imnodes_SaveEditorStateToIniFile(
        editor: *const ImNodesEditorContext,
        file_name: *const ::std::os::raw::c_char,
    );
}
unsafe extern "C" {
    pub fn imnodes_LoadCurrentEditorStateFromIniFile(file_name: *const ::std::os::raw::c_char);
}
unsafe extern "C" {
    pub fn imnodes_LoadEditorStateFromIniFile(
        editor: *mut ImNodesEditorContext,
        file_name: *const ::std::os::raw::c_char,
    );
}
